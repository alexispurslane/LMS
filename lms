#!/usr/bin/env python3
import tdl, time, math, random, sys, signal

sys.path.append('generators/')
sys.path.append('lib/')
sys.path.append('nouns/')
sys.path.append('objects/')

import maps, monsters, consts, colors, utils, races, player, draw

# I'm truely sorry.
def run_game(GS):
    tdl.setFont('font/consolas12x12_gs_tc.png', greyscale=True, altLayout=True)
    GS = GS or {
        'console': tdl.init(consts.WIDTH, consts.HEIGHT, 'Last Man Standing'),
        'screen': 'INTRO',
        'player': player.Player(races.SOLDIER),
        'terrain_map': maps.TerrainMap(math.floor(consts.WIDTH/2), consts.HEIGHT),
        'messages': list(reversed([
            'After the end of humanity\'s battle',
            'with the god Chaom, you\'re the last warrior left.',
            'Your task is to kill the monsters that serve',
            'the new Boss. The stairs to the next',
            'level will appear once you have killed \'em all.',
            'You are on your own. Best of luck, soldier!'
        ])),
        'selection': 0,
        'side_screen': 'HUD',
        'turns': 0,
        'wins': 0
    }

    def signal_handler(signal, frame):
        print('SIGINT received, exiting now.')
        consts.quit(GS, GS['player'])

    signal.signal(signal.SIGINT, signal_handler)
    while True:
        if GS['player'].health <= 0:
            GS['screen'] = 'DEATH'
        draw.draw_screen(GS)

        tdl.event.set_key_repeat(delay=100, interval=0)
        for event in tdl.event.get():
            if event.type == 'QUIT':
                consts.quit(GS, GS['player'])
            elif event.type == 'MOUSEDOWN' and event.button == 'RIGHT':
                monster = GS['terrain_map'].monster_at(event.cell)
                item    = GS['terrain_map'].dungeon['items'][event.cell]
                terrain = GS['terrain_map'].get_type(event.cell)

                obj = terrain
                if monster:
                    obj = monster
                elif len(item) > 0:
                    obj = item[0]
                    
                GS['messages'].insert(0, 'You see a ' + obj)
            elif event.type == 'KEYDOWN':
                if event.keychar.upper() == 'Q':
                    consts.quit(GS, GS['player'])
                elif GS['side_screen'] == 'INVENTORY':
                    if event.keychar.upper() == 'UP':
                        GS['selection'] -= 1
                        GS['selection'] %= len(GS['player'].inventory)
                    elif event.keychar.upper() == 'DOWN':
                        GS['selection'] += 1
                        GS['selection'] %= len(GS['player'].inventory)
                    elif event.keychar.upper() == 'D':
                        pos = GS['player'].pos
                        GS['terrain_map'].dungeon['items'][pos].append(
                            GS['player'].inventory[GS['selection']])
                        GS['player'].remove_inventory_item(GS['selection'])
                    elif event.keychar.upper() == 'W':
                        GS['player'].inventory[GS['selection']].equip(GS['player'])
                    elif event.keychar.upper() == 'T':
                        GS['player'].inventory[GS['selection']].dequip(GS['player'])
                    elif event.keychar.upper() == 'I':
                        GS['side_screen'] = 'HUD'
                elif GS['screen'] == 'DEATH':
                    if event.keychar.upper() == 'R':
                        run_game(None)
                elif GS['screen'] == 'INTRO' and len(event.keychar) == 1 or\
                     event.keychar.upper() == 'SPACE':
                    GS['screen'] = 'CHARSEL'
                elif GS['screen'] == 'CHARSEL':
                    if event.keychar.isalpha() and len(event.keychar) == 1:
                        racen = ord(event.keychar.lower())-97
                        if racen < len(races.RACES):
                            selected_race = races.RACES[racen]
                            GS['player'] = player.Player(selected_race)

                            GS['player'].pos = GS['terrain_map'].generate_new_map()

                            GS['terrain_map'].dungeon['monsters'] = sorted(
                                GS['terrain_map'].dungeon['monsters'], key=lambda m: m.speed)

                            GS['screen'] = 'GAME'
                elif GS['screen'] == 'GAME':
                    if event.keychar in consts.GAME_KEYS['M'] and GS['side_screen'] != 'MAN':
                        GS['player'].move(event, GS)
                    elif event.keychar in consts.GAME_KEYS['A']:
                        consts.GAME_KEYS['A'][event.keychar](GS, GS['player'])
                    elif event.keychar == '?' and GS['side_screen'] == 'HUD':
                        GS['side_screen'] = 'MAN'
                    elif event.keychar == '?' and GS['side_screen'] == 'MAN':
                        GS['side_screen'] = 'HUD'

                    if GS['side_screen'] == 'HUD':
                        utils.monster_turn(GS)
                        GS['turns'] += 1

run_game(None)
