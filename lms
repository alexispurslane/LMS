#!/usr/bin/env python3
import tdl, time, math, random, sys, signal, pickle, os

sys.path.append('generators/')
sys.path.append('lib/')
sys.path.append('nouns/')
sys.path.append('objects/')

import maps, monsters, consts, colors, utils, races, player, draw, area
from playsound import playsound

tdl.setFont('assets/font/IBMCGA16x16_gs_ro.png', greyscale=True)
tdl.event.set_key_repeat(delay=40, interval=0)

GS = {}
def reset_GS():
    global GS
    if os.path.exists('.gamesave') and os.path.getsize('.gamesave') > 0:
        with open('.gamesave', 'r') as gsf: GS = pickle.load(gsf)
    else:
        GS = {
            'console': tdl.init(consts.WIDTH, consts.HEIGHT, 'Last Man Standing'),
            'screen': 'INTRO',
            'player': player.Player(races.WARRIOR),
            'terrain_map': maps.TerrainMap(consts.MAP_WIDTH, consts.MAP_HEIGHT),
            'messages': [],
            'selection': 0,
            'side_screen': 'HUD',
            'turns': 0,
            'map_console': None,
            'scores': [],
            'message_offset': 0,
            'mouse_pos': (-1,-1),
            'animations': []
        }
        GS['map_console'] = tdl.Console(GS['terrain_map'].width,
                                        GS['terrain_map'].height)
        with open('.gamescores', 'r') as scores:
            for score in scores:
                if score.strip() != '':
                    GS['scores'].append(int(score.strip()))

reset_GS()

if consts.MUSIC:
    playsound('assets/Fantascape_Looping.mp3', False)

def signal_handler(signal, frame):
    print('SIGINT received, exiting now.')
    consts.quit(GS)

signal.signal(signal.SIGINT, signal_handler)

class Game(tdl.event.App):
    def ev_KEYDOWN(self, event):
        global GS
        if event.keychar.upper() == 'Q':
            consts.quit(GS)
        elif GS['side_screen'] == 'INVENTORY':
            if event.keychar.upper() == 'UP':
                GS['selection'] -= 1
                GS['selection'] %= len(GS['player'].inventory)
            elif event.keychar.upper() == 'DOWN':
                GS['selection'] += 1
                GS['selection'] %= len(GS['player'].inventory)
            elif event.keychar.upper() == 'D':
                pos = GS['player'].pos
                item = GS['player'].inventory[GS['selection']][0]
                GS['terrain_map'].dungeon['items'][pos].append(item)
                GS['player'].remove_inventory_item(item)
            elif event.keychar.upper() == 'ENTER':
                GS['player'].inventory[GS['selection']][0].equip(GS['player'])
            elif event.keychar.upper() == 'ESCAPE':
                GS['player'].inventory[GS['selection']][0].dequip(GS['player'])
            elif event.keychar.upper() == 'I':
                GS['side_screen'] = 'HUD'
            elif event.keychar.isnumeric():
                GS['selection'] = int(event.keychar)
            GS['player'].update_inventory()
        elif GS['screen'] == 'DEATH':
            if event.keychar.upper() == 'R':
                reset_GS()
        elif GS['screen'] == 'INTRO' and len(event.keychar) == 1 or\
                event.keychar.upper() == 'SPACE':
            GS['screen'] = 'CHARSEL'
        elif GS['screen'] == 'CHARSEL':
            if event.keychar.upper() == 'UP':
                GS['selection'] -= 1
                GS['selection'] %= len(races.RACES)+1
            elif event.keychar.upper() == 'DOWN':
                GS['selection'] += 1
                GS['selection'] %= len(races.RACES)+1
            elif event.keychar.isnumeric() and len(event.keychar) == 1:
                GS['selection'] = int(event.keychar)
            elif event.keychar.upper() == 'ENTER':
                racen = GS['selection']-1
                if racen < len(races.RACES) and racen >= 0:
                    selected_race = races.RACES[racen]
                    GS['player'] = player.Player(selected_race)
                    consts.DIFFICULTY = selected_race.suggested_difficulty

                    GS['player'].pos = GS['terrain_map'].generate_new_map()

                    GS['terrain_map'].dungeon['monsters'] = sorted(
                        GS['terrain_map'].dungeon['monsters'], key=lambda m: m.speed)

                    GS['screen'] = 'GAME'
        elif GS['screen'] == 'GAME':
            if event.keychar in consts.GAME_KEYS['M'] and GS['side_screen'] != 'MAN':
                GS['player'].move(event, GS)
            elif event.keychar in consts.GAME_KEYS['A']:
                consts.GAME_KEYS['A'][event.keychar](GS, GS['player'])
            elif event.keychar == '?' and GS['side_screen'] == 'HUD':
                GS['side_screen'] = 'MAN'
            elif event.keychar == '?' and GS['side_screen'] == 'MAN':
                GS['side_screen'] = 'HUD'

        if len(event.keychar) == 1 and not GS['screen'] == 'DEATH':
            utils.monster_turn(GS)
            GS['turns'] += 1

    def ev_QUIT(self, event):
        consts.quit(GS)

    def ev_MOUSEDOWN(self, event):
        GS['mouse_pos'] = event.cell
        base = math.floor(consts.WIDTH/2)+1
        b = area.Area(base, 0, consts.WIDTH-base-2, consts.MESSAGE_NUMBER)
        if event.button == 'RIGHT':
            t = GS['terrain_map']
            ox = max(0, GS['player'].pos[0]-math.floor(consts.WIDTH/4))
            oy = max(0, GS['player'].pos[1]-math.floor(consts.HEIGHT/2))
            event.cell = utils.tuple_add(event.cell, (ox, oy))
            monster = t.monster_at(event.cell)
            item    = event.cell in t.dungeon['items']
            decor   = event.cell in t.dungeon['decor']
            terrain = t.get_type(event.cell)

            obj = terrain.lower()
            if monster:
                obj = 'a ' + monster.name
            elif terrain == 'STONE' and decor and t.dungeon['decor'][event.cell] == 'FM':
                obj = 'lichen-covered wall'
            elif terrain == 'STONE':
                obj = 'wall'
            elif item:
                if len(t.dungeon['items'][event.cell]) > 0:
                    obj = t.dungeon['items'][event.cell][0].name
            elif decor:
                if t.dungeon['decor'][event.cell] == 'FM':
                    obj = 'a weed'
                elif t.dungeon['decor'][event.cell] == 'FR':
                    obj = 'flames'
                elif not t.dungeon['decor'][event.cell]:
                    obj = 'floor'
                else:
                    obj = 'hot rocks'

            GS['messages'].append('You see ' + obj + ' there.')
        elif event.button == 'SCROLLUP' and b.inside(event.cell):
            if GS['message_offset'] > 0:
                GS['message_offset'] -= 1
        elif event.button == 'SCROLLDOWN' and b.inside(event.cell):
            if GS['message_offset'] < len(GS['messages']):
                GS['message_offset'] += 1
            
    def update(self, dt):
        if GS['player'].health <= 0 and not GS['screen'] == 'DEATH':
            with open('.gamescores', 'a') as scores:
                scores.write(str(GS['player'].score(GS))+'\n')
            GS['screen'] = 'DEATH'
        draw.draw_screen(GS)
            
Game().run()
