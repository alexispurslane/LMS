import tdl
import math, random
import maps, monsters, consts, colors, utils

console = tdl.init(consts.WIDTH, consts.HEIGHT, 'Alchemy Sphere')
screen = 'INTRO'
player = utils.Player()
proweling_monsters = []
terrain_map = maps.TerrainMap(math.floor(consts.WIDTH/2), consts.HEIGHT)
messages = []

def draw_messages():
    for i in range(0, consts.HEIGHT):
        console.drawChar(math.ceil(consts.WIDTH/2), i, '|')
        
    for (i, m) in enumerate(messages):
        c = int(255/(i+1))
        if c < 0: c = 0 # cap
        
        console.drawStr(math.ceil(consts.WIDTH/2)+1, i, m, fg=(c, c, c))
        
    if len(messages) > 17:
        return []
    else:
        return messages

while True:
    console.clear()

    if screen == 'GAME':
        messages = draw_messages()
        terrain_map.draw_map(console, player)
        for m in proweling_monsters:
            if terrain_map.terrain_map.fov[m.x, m.y]:
                console.drawChar(m.x, m.y, m.char, fg=m.fg, bg=colors.brown)
        console.drawChar(player.x, player.y, '@', bg=colors.brown)
    elif screen == 'INTRO':
        console.drawStr(1, 2, 'Welcome to Alchemy Sphere')
        console.drawStr(0, 3, '*press any key to continue*')
            
    tdl.flush()
    
    for event in tdl.event.get():
        if event.type == 'QUIT':
            raise SystemExit('The window has been closed.')
        elif event.type == 'KEYDOWN' and screen == 'INTRO':
            screen = 'GAME'
            (proweling_monsters, player.x, player.y) = terrain_map.generate_new_map()
        elif event.type == 'KEYDOWN' and screen == 'GAME':
            if event.keychar.upper() in consts.GAME_KEYS['M']:
                dX, dY = consts.GAME_KEYS['M'][event.keychar.upper()]
                nX = player.x + dX
                nY = player.y + dY
                if terrain_map.is_walkable(nX, nY):
                    player.x = nX
                    player.y = nY
                
                m = terrain_map.monster_at(nX, nY)
                if m:
                    player.attack(m)
                    messages.insert(0, "You attack the "+type(m).__name__)
                    messages.insert(0, "The "+type(m).__name__+" attacks you")
                    messages.insert(0, "It's health is now "+str(m.health))
                elif nX > consts.WIDTH and terrain_map.more_dungeons():
                    write_message("You move on through the forest")
                    (proweling_monsters, player.x, player.y) = terrain_map.generate_new_map()
                else:
                    messages.insert(0, "You hit a tree")
                    
            for m in proweling_monsters:
                adj = [
                    utils.Point(m.x+1, m.y),
                    utils.Point(m.x-1, m.y),
                    utils.Point(m.x, m.y+1),
                    utils.Point(m.x, m.y-1)
                ]
                if utils.dist(m, player) <= 8 and utils.dist(m, player) > 2:
                    valid = list(filter(lambda p: terrain_map.is_walkable(p.x, p.y, player), adj))
                    if random.randint(0, 10) <= 7:
                        if len(valid) > 0:
                            chosen = min(valid, key=lambda p: utils.dist(p, player))
                            m.x, m.y = chosen.x, chosen.y
                    else:
                        if len(valid) > 0:
                            chosen = random.choice(valid)
                            m.x, m.y = chosen.x, chosen.y
                    
